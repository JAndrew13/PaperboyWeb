// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Paperboy.Api.Data;

#nullable disable

namespace Paperboy.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230606153654_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Paperboy.Api.Data.Models.Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ticker1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticker2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("Paperboy.Api.Data.Models.Bot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("CurrentBalance")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProfitLoss")
                        .HasColumnType("float");

                    b.Property<double>("ProfitLossPercent")
                        .HasColumnType("float");

                    b.Property<double>("StartingBalance")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("TimeRunning")
                        .HasColumnType("time");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("int");

                    b.Property<string>("TradingPair")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("Paperboy.Api.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pair")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlertId")
                        .IsUnique();

                    b.HasIndex("BotId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Paperboy.Api.Data.Models.Alert", b =>
                {
                    b.HasOne("Paperboy.Api.Data.Models.Bot", "Bot")
                        .WithMany("Alerts")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("Paperboy.Api.Data.Models.Order", b =>
                {
                    b.HasOne("Paperboy.Api.Data.Models.Alert", "Alert")
                        .WithOne("Order")
                        .HasForeignKey("Paperboy.Api.Data.Models.Order", "AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Paperboy.Api.Data.Models.Bot", "Bot")
                        .WithMany("Orders")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alert");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("Paperboy.Api.Data.Models.Alert", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Paperboy.Api.Data.Models.Bot", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
